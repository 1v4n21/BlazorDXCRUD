@page "/chartVentas"
@using BlazorDXCRUD.Models

<!-- Injectamos las clases con un nombre apuntando a ellas -->
@inject IVentaService VentaService

<!-- Utilizar DOM en Blazor -->
@rendermode InteractiveServer

<!-- Titulo de la pagina -->
<PageTitle>Chart de Ventas</PageTitle>

<br>

<!-- h1 de la vista -->
<h1>Chart de Ventas</h1>

<!-- Descripción de la web -->
<p>Esta pagina muestra graficas de las ventas.</p>

<!-- Mensaje de error en el caso de lanzar excepcion -->
@Message

<!-- ComboBox para seleccionar el grafico que queremos ver -->
<DxComboBox Data="Graficas" NullText="Selecciona un articulo..." 
			FilteringMode="DataGridFilteringMode.Contains" @bind-Value="@seleccion"
			@onclick="CargarGrafica"/>

<!-- Espacio en blanco -->
<br />

<!-- Comprobamos que se ha seleccionado un valor en el comboBox para cargar la grafica -->
@if (seleccion != "")
{    
    <!-- Crea el grafico en base a las ventas seleccionadas -->
    <DxChart Data="@ventas" LabelOverlap="ChartLabelOverlap.Hide">
        <!-- Para que no se superpongan las etiquetas -->
        <!-- Titulo del grafico -->
        <DxChartTitle Text="Ventas">
            <!-- Subtitulo del grafico, será el articulo seleccionado -->
            <DxChartSubTitle Text="@seleccion" />
        </DxChartTitle>

        <!-- Eje de abajo fecha -->
        <DxChartArgumentAxis>
            <DxChartAxisTitle Text="Fecha" /> <!-- Texto -->
            <DxChartAxisLabel Format='ChartElementFormat.ShortDate' /> <!-- Formato -->
        </DxChartArgumentAxis>

        <!-- Eje izquierdo -->
        <!-- Alinea con la cantidad -->
        <DxChartValueAxis>
            <DxChartAxisTitle Text="Cantidad, unidades" />
        </DxChartValueAxis>

        <!-- Eje derecho -->
        <!-- Alinea con el precio -->
        <DxChartValueAxis Name="precio" Alignment="ChartAxisAlignment.Far">
            <DxChartAxisTitle Text="Precio, €" />
        </DxChartValueAxis>

        <!-- Barras de cantidad BarSeries -->
        <DxChartBarSeries ArgumentField="@((Venta i) => i.Date)"
                          ValueField="@((Venta i) => i.cantidad)"
                          Name="Cantidad">

            <!-- Mostrar etiquetas -->
            <DxChartSeriesLabel Visible="true" />
        </DxChartBarSeries>

        <!-- Lineas de precio LineSeries -->
        <DxChartLineSeries ArgumentField="@((Venta i) => i.Date)"
                           ValueField="@((Venta i) => i.precio)"
                           Name="Precio"
                           Axis="precio">
            <!-- Modificar los puntos a polygon, size 20 -->
            <DxChartSeriesPoint Symbol="ChartPointSymbol.Polygon" Size="20" />

            <!-- Mostrar Etiquetas visible=true y tamaño width=2 -->
            <DxChartSeriesLabel Visible="true">
                <DxChartSeriesLabelConnector Visible="true" Width="2" />
            </DxChartSeriesLabel>
        </DxChartLineSeries>

        <!-- Personalizar la leyenda Horizontal, Right (Arriba a la derecha) -->
        <DxChartLegend Orientation="Orientation.Horizontal"
                       HorizontalAlignment="HorizontalAlignment.Right"
                       Position="RelativePosition.Outside" />

    </DxChart>
}	

@code {
    //Array de todas las ventas existentes en la BD con el metodo CargarGrafica()
    public IEnumerable<Venta> ventas { get; set; }

    //Opciones del comboBox para las graficas
    public IEnumerable<String> Graficas = new List<String>()
	{
		"Tornillo estrella",
		"Tornillo pala",
		"Tornillo pala / Tornillo estrella",
	};

    //Opcion que seleccionamos en el ComboBox
    public string seleccion { get; set; }

    //Variable mensaje para mostrar las excepciones en el try catch
    public string Message { get; set; }

    //Metodo para cargar la grafica en base a la opcion seleccionada
	protected async Task CargarGrafica()
	{
		try
		{
			//Metodo que carga todos los datos de la BD
			ventas = await VentaService.GetVentasByArticulo(seleccion);
		}
		catch (Exception e)
		{
			//Mensaje de error excepcion
			Message = e.Message;
		}
	}
}
